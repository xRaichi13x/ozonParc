import requests
import pandas as pd
from time import sleep
from tqdm import tqdm

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CLIENT_ID = "11777"
API_KEY = "e7e82435-cf0b-4e52-a12d-b728cade1ad7"
HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json",
}


def get_all_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å product_id"""
    products = []
    last_id = ""
    limit = 1000

    with tqdm(desc="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤") as pbar:
        while True:
            data = {
                "filter": {},
                "limit": limit,
                "visibility": "ALL",
                "last_id": last_id,
            }

            response = requests.post(
                "https://api-seller.ozon.ru/v3/product/list", headers=HEADERS, json=data
            )

            if response.status_code == 200:
                result = response.json()
                items = result.get("result", {}).get("items", [])

                if not items:
                    break

                # save product_id –∏ offer_id
                for item in items:
                    if item.get("product_id"):
                        products.append(
                            {
                                "product_id": str(item["product_id"]),
                                "offer_id": str(item.get("offer_id", "")),
                            }
                        )

                pbar.update(len(items))
                last_id = result.get("result", {}).get("last_id", "")

                if not last_id:
                    break
            else:
                print(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                break

            sleep(1)

    return products

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ product_id"""


def get_products_info(product_ids):
    products_info = []
    chunk_size = 1000  # –õ–∏–º–∏—Ç API

    with tqdm(total=len(product_ids), desc="–ü–æ–ª—É—á–µ–Ω–∏–µ SKU") as pbar:
        for i in range(0, len(product_ids), chunk_size):
            chunk = product_ids[i : i + chunk_size]
            data = {"product_id": chunk}

            response = requests.post(
                "https://api-seller.ozon.ru/v3/product/info/list",
                headers=HEADERS,
                json=data,
            )

            if response.status_code == 200:
                result = response.json()
                for item in result.get("items", []):
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π sku –∏–∑ sources –∏–ª–∏ stocks
                    sku = None
                    if item.get("sources"):
                        sku = item["sources"][0].get("sku")
                    elif item.get("stocks") and item["stocks"].get("stocks"):
                        sku = item["stocks"]["stocks"][0].get("sku")

                    products_info.append(
                        {
                            "product_id": str(item.get("id", "")),
                            "offer_id": item.get("offer_id", ""),
                            "sku": str(sku) if sku else None,
                            "created_at": item.get("created_at", ""),
                            "updated_at": item.get("updated_at", ""),
                        }
                    )
            else:
                print(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

            pbar.update(len(chunk))
            sleep(1)

    return products_info


def get_ratings(sku_list):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ SKU"""
    ratings = {}
    chunk_size = 100  # –õ–∏–º–∏—Ç API

    with tqdm(total=len(sku_list), desc="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤") as pbar:
        for i in range(0, len(sku_list), chunk_size):
            chunk = sku_list[i : i + chunk_size]
            data = {"skus": chunk}

            response = requests.post(
                "https://api-seller.ozon.ru/v1/product/rating-by-sku",
                headers=HEADERS,
                json=data,
            )

            if response.status_code == 200:
                result = response.json()
                for product in result.get("products", []):
                    sku = str(product.get("sku", ""))
                    ratings[sku] = product.get("rating")
            else:
                print(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

            pbar.update(len(chunk))
            sleep(1.5)

    return ratings


def save_to_excel(products_info, ratings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    df = pd.DataFrame(products_info)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ SKU
    df["rating"] = df["sku"].map(ratings)

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ SKU –∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    df = df[df["sku"].notna() & df["rating"].notna()]

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df = df[["product_id", "offer_id", "sku", "rating", "created_at", "updated_at"]]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df.to_excel("Ozon_Products_Full_Info.xlsx", index=False)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")


def main():
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    products = get_all_products()
    if not products:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö (–≤–∫–ª—é—á–∞—è SKU)
    product_ids = [p["product_id"] for p in products]
    products_info = get_products_info(product_ids)

    # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ SKU
    valid_skus = [p["sku"] for p in products_info if p.get("sku")]
    ratings = get_ratings(valid_skus)

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    save_to_excel(products_info, ratings)


if __name__ == "__main__":
    main()
